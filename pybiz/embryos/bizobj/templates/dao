from pybiz import Dao


class {{ dao_class_name }}(Dao):
{% if dao %}
    {% for method in dao %}
    def {{ method['name'] }}(
        self,
        {% for arg in method.get('args', []) %}
            {{ arg['name'] }}: {{ arg['type'] }}
            {% if arg != method['args'][-1] %},{% endif %}
        {% endfor %}
        {% for kwarg in method.get('kwargs', []) %}
            {{ kwarg['name'] }}: {{ kwarg['type'] }}={{ kwarg.get('default') }}
            {% if kwarg != method['kwargs'][-1] %},{% endif %}
        {% endfor %}
        ):
        pass
    {% endfor  %}
{% else %}
    def exists(self, _id=None, public_id=None) -> bool:
        raise NotImplementedError('override in subclass')

    def fetch(self, _id=None, public_id=None, fields: dict=None) -> dict:
        raise NotImplementedError('override in subclass')

    def fetch_many(self, _ids: list=None, public_ids:list=None, fields: dict=None) -> dict:
        raise NotImplementedError('override in subclass')

    def create(self, _id=None, public_id=None, data: dict=None) -> dict:
        raise NotImplementedError('override in subclass')

    def update(self, _id=None, public_id=None, data: dict=None) -> dict:
        raise NotImplementedError('override in subclass')

    def update_many(self, _ids: list=None, public_ids: list=None, data: list=None) -> dict:
        raise NotImplementedError('override in subclass')

    def delete(self, _id=None, public_id=None) -> dict:
        raise NotImplementedError('override in subclass')

    def delete_many(self, _ids: list=None, public_ids: list=None) -> dict:
        raise NotImplementedError('override in subclass')
{% endif %}
