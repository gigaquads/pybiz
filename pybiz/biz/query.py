from functools import reduce
from typing import List, Dict, Set, Text, Type, Tuple

from appyratus.utils import DictUtils, DictObject

from pybiz.util import is_bizobj, is_sequence
from pybiz.constants import IS_BIZOBJ_ANNOTATION
from pybiz.schema import Schema, fields
from pybiz.predicate import Predicate

from .internal.field_property import FieldProperty
from .internal.order_by import OrderBy
from .biz_list import BizList
from .biz_attribute import BizAttribute
from .relationship import Relationship
from .view import View, ViewProperty


class QuerySchema(Schema):
    alias = fields.String()
    limit = fields.Int(nullable=True)
    offset = fields.Int(nullable=True)
    order_by = fields.List(fields.String(), default=[])
    subqueries = fields.Dict(default={})
    where = fields.List(fields.Dict(), nullable=True)
    target = fields.Nested({
        'type': fields.String(),
        'attributes': fields.Dict(default={}),
        'fields': fields.Dict(default={}),
        'views': fields.Dict(default={}),
    })


class QueryExecutor(object):
    def execute(self, query: 'Query'):
        biz_type = query.biz_type
        dao = biz_type.get_dao()

        query_predicates = query.get_where()
        if query_predicates:
            dao_predicate = reduce(lambda x, y: x & y, query.get_where())
        else:
            dao_predicate = None

        records = dao.query(
            predicate=dao_predicate,
            fields=query.get_fields(),
            order_by=query.get_order_by(),
            limit=query.get_limit(),
            offset=query.get_offset(),
        )
        targets = biz_type.BizList(
            biz_type(record).clean() for record in records
        )
        return self.execute_recursive(query, targets)

    def execute_recursive(self, query: 'Query', sources: List['BizObject']):
        biz_type = query.biz_type
        for k, subquery in query.get_subqueries().items():
            relationship = biz_type.relationships[k]
            # these "where" predicates are AND'ed with the predicates provided
            # by the relationship, not overriding them.
            targets = relationship.query(
                sources,
                select=subquery.get_fields(),
                where=subquery.get_where(),
                limit=subquery.get_limit(),
                offset=subquery.get_offset(),
                order_by=subquery.get_order_by(),
            )
            self.execute_recursive(subquery, targets)
            for source, target in zip(sources, targets):
                source.related[k] = target
        for k in query.get_views():
            for source in sources:
                view = getattr(biz_type, k)
                view_data = view.query()
                source.viewed[k] = view_data
        for k in query.get_attributes():
            for source in sources:
                attr = getattr(biz_type, k)
                value = attr.query()
                setattr(source, k, value)
        return sources


class QueryPrinter(object):
    def print_query(self, query):
        """
        Just pretty print the query.
        """
        print(self.format_query(query))

    def format_query(self, query, indent=0) -> Text:
        """
        Return a pretty printed string of the query in Pybiz query langauge.
        """
        biz_type_name = query.biz_type.__name__

        # we collect all substrings of the final format string in three
        # different lists below. Formatting differs slightly for substrings
        # generated by recursive calls to this method, and this is why collect
        # them separarely here.
        pre_subquery_substrs = []
        post_subquery_substrs = []
        subquery_substrs = []

        # target_names is a lexicographically sorted list of all
        # non-Relationship selectble attribute names on the target BizObject
        # class.
        target_names = []
        target_names += list(query.get_fields().keys() - {'_id', '_rev'})
        target_names += list(query.get_views().keys())
        target_names += list(query.get_attributes().keys())
        target_names.sort()

        pre_subquery_substrs.append(f'FROM {biz_type_name} SELECT')
        pre_subquery_substrs.extend(f' - {k}' for k in target_names)

        # recursively render subqueries corresponding to selected Relationships
        if query.get_subqueries():
            for name, subq in sorted(query.get_subqueries().items()):
                subquery_substr = self.format_query(subq, indent=indent+5)
                subquery_substrs.append(f'{" " * indent} - {name}: (')
                subquery_substrs.append(subquery_substr)

        # render "where"-expression Predicates
        predicates = query.get_where()
        if predicates:
            predicate = reduce(
                lambda x, y: x & y, query.get_where()
            )
            post_subquery_substrs.append(f'WHERE {predicate}')

        # render order by
        order_by = query.get_order_by()
        if order_by:
            post_subquery_substrs.append(
                'ORDER_BY (' + ', '.join(
                f'{x.key} {"DESC" if x.desc else "ASC"}'
                for x in order_by
            ) + ')')

        # render limit and offset
        offset = query.get_offset()
        if offset is not None:
            post_subquery_substrs.append(f'OFFSET {offset}')
        limit = query.get_limit()
        if limit is not None:
            post_subquery_substrs.append(f'LIMIT {limit}')

        # generate final format string
        fstr = '\n'.join(
            f'{" " * indent}{chunk}' for chunk in pre_subquery_substrs
        )
        if subquery_substrs:
            fstr += '\n' + '\n'.join(f'{chunk}' for chunk in subquery_substrs)
        if post_subquery_substrs:
            fstr += '\n' + '\n'.join(
                f'{" " * indent}{chunk}' for chunk in post_subquery_substrs
            )

        return fstr


class QueryMarshaller(object):

    schema = QuerySchema()

    def dump(self, query):
        return {
            'alias': query.alias,
            'limit': query.get_limit(),
            'offset': query.get_offset(),
            'order_by': [x.dump() for x in query.get_order_by()],
            'where': (
                [x.dump() for x in query.get_where()] if
                query.get_where() is not None
                else None
            ),
            'subqueries': {
                k: self.dump(v) for k, v in query.get_subqueries().items()
            },
            'target': {
                'type': query.biz_type.__name__,
                'attributes': sorted(query.get_attributes().keys()),
                'fields': sorted(query.get_fields().keys()),
                'views': sorted(query.get_views().keys()),
            }
        }

    def load(self, biz_type, data):
        data, errors = self.schema.process(data)
        if errors:
            # TODO: raise custom exceptions
            raise ValueError(str(errors))

        subqueries = []
        for v in data['subqueries'].values():
            child_biz_type_name = v['target']['type']
            child_biz_type = biz_type.registry.types.biz[child_biz_type_name]
            subqueries.append(self.load(child_biz_type, v))

        targets = subqueries.copy()
        targets += list(data['target']['fields'].keys())
        targets += list(data['target']['views'].keys())
        targets += list(data['target']['attributes'].keys())

        order_by = [OrderBy.load(x) for x in data['order_by']]

        query = Query(biz_type=biz_type, alias=data['alias'])
        query.select(targets)
        query.order_by(order_by)
        query.limit(data['limit'])
        query.offset(data['offset'])

        if data['where']:
            query.where([
                Predicate.load(biz_type, x) for x in data['where']
            ])

        return query

    @classmethod
    def load_from_keys(cls, biz_type: Type['BizObject'], keys: Set[Text]=None, tree=None) -> 'Query':
        query = Query(biz_type)

        if tree is None:
            assert keys
            tree = DictUtils.unflatten_keys({k: None for k in keys})

        if '*' in tree:
            del tree['*']
            tree.update({
                k: None for k, v in biz_type.schema.fields.items()
                if not v.meta.get('private', False)
            })
        elif not tree:
            tree = {'_id': None, '_rev': None}

        for k, v in tree.items():
            if isinstance(v, dict):
                rel = biz_type.relationships[k]
                subquery = cls.load_from_keys(rel.target_biz_type, tree=v)
                subquery.alias = rel.name
                query.add_target(subquery, None)
            else:
                query.add_target(k, v)
        return query


class Query(object):
    """
    query = (
        User.select(
            User.account.select(Account.name)
            User.email
        ).where(
            User.age > 14
        ).orderby(
            User.email.desc
        ).limit(1)
    )
    """

    _executor = QueryExecutor()
    _marshaller = QueryMarshaller()
    _printer  = QueryPrinter()

    def __init__(
        self,
        biz_type: Type['BizType'],
        alias: Text = None,
        fields: Set[Text] = None
    ):
        self._alias = alias
        self._biz_type = biz_type
        self._target_views = {}
        self._target_attributes = {}
        self._subqueries = {}
        self._order_by = []
        self._where_predicates = None
        self._offset = None
        self._limit = None

        self._target_fields = {'_id': None, '_rev': None}
        if fields:
            self._target_fields.update({k: None for k in fields})
        else:
            self._target_fields.update({
                k: None for k, f in biz_type.schema.fields.items()
                if (f.meta.get('pybiz_is_fk', False) or f.required)
            })

        self._dict_value_map = {
            'limit': self.get_limit,
            'offset': self.get_offset,
            'where': self.get_where,
            'order_by': self.get_order_by,
            'fields': self.get_fields,
            'views': self.get_views,
            'attributes': self.get_attributes,
            'subqueries': self.get_subqueries,
        }

    def __getitem__(self, key):
        getter = self._dict_value_map.get(key)
        return getter() if getter else None

    def __repr__(self):
        biz_type_name = self.biz_type.__name__ if self.biz_type else ''
        if self.alias:
            alias_substr = f', alias="{self.alias}"'
        else:
            alias_substr = ''
        return f'<Query({biz_type_name}{alias_substr})>'

    def execute(self, first=False):
        targets = self._executor.execute(query=self)
        if first:
            return targets[0] if targets else None
        else:
            return targets

    def select(self, *targets: Tuple, append=True) -> 'Query':
        if not append:
            self.clear_targets()
        self.add_targets(targets)
        return self

    def clear_targets(self):
        self._subqueries.clear()
        self._target_fields.clear()
        self._target_views.clear()
        self._target_attributes.clear()

    def add_targets(self, targets):
        for obj in targets:
            if is_sequence(obj):
                self.add_targets(obj)
            elif isinstance(obj, dict):
                for k, v in obj.items():
                    self.add_target(k, v)
            else:
                self.add_target(obj, None)

    def add_target(self, target, params):
        """
        Add a new query target to this Query. A target can be a FieldProperty,
        RelationshipProperty, ViewProperty, or more generically, any
        BizAttribute declared on self.biz_type, the targeted BizObject class.
        The target can also just be the string name of one of these things.
        Finally, a target can also be an already-formed Query object.
        """
        from .internal.relationship_property import RelationshipProperty

        key = None
        targets = None

        try:
            if isinstance(target, str):
                target = getattr(self._biz_type, target)
        except AttributeError:
            raise AttributeError(
                f'{self._biz_type} has no attribute "{target}"'
            )

        if isinstance(target, FieldProperty):
            key = target.field.name
            targets = self._target_fields
        if isinstance(target, RelationshipProperty):
            key = target.relationship.name
            target = Query.from_keys(
                biz_type=target.relationship.target_biz_type,
                keys={'_id', '_rev'}  # minimum fields to query
            )
            targets = self._subqueries
            params = target
        elif isinstance(target, ViewProperty):
            key = target.name
            targets = self._target_views
        elif isinstance(target, BizAttribute):
            key = target.name
            targets = self._target_attributes
        elif isinstance(target, Query):
            key = target.alias
            targets = self._subqueries
            params = target

        if targets is not None:
            targets[key] = params

    def where(self, *predicates: 'Predicate', append=True) -> 'Query':
        """
        Append or replace "where"-expression Predicates.
        """
        if predicates is None:
            self._where_predicates = None
        else:
            predicates_tmp = []
            for obj in predicates:
                if is_sequence(obj):
                    predicates_tmp.extend(obj)
                else:
                    predicates_tmp.append(obj)
            predicates = tuple(predicates_tmp)
            if self._where_predicates is None:
                self._where_predicates = tuple()
            if append:
                self._where_predicates += predicates
            else:
                self._where_predicates = predicates
        return self

    def limit(self, limit: int) -> 'Query':
        """
        Set or re-set the Query limit int, for pagination. Used in convert with
        offset.
        """
        self._limit = max(limit, 1) if limit is not None else None
        return self

    def offset(self, offset: int) -> 'Query':
        """
        Set or re-set the Query offset int, for pagination, used in conjunction
        with limit.
        """
        self._offset = max(0, offset) if offset is not None else None
        return self

    def order_by(self, *order_by) -> 'Query':
        order_by_tmp = []
        for obj in order_by:
            if is_sequence(obj):
                order_by_tmp.extend(obj)
            else:
                order_by_tmp.append(obj)
        order_by = tuple(order_by_tmp)
        self._order_by = order_by if order_by else tuple()
        return self

    def show(self):
        self._printer.print_query(query=self)

    def dump(self) -> Dict:
        return self._marshaller.dump(self)

    @classmethod
    def load(cls, biz_type: Type['BizObject'], data: Dict) -> 'Query':
        return cls._marshaller.load(biz_type, data)

    @classmethod
    def from_keys(cls, biz_type: Type['BizObject'], keys: Set[Text]):
        return cls._marshaller.load_from_keys(biz_type, keys=keys)

    @property
    def alias(self) -> Text:
        return self._alias

    @alias.setter
    def alias(self, alias):
        if self._alias is not None:
            raise ValueError('alias is readonly')
        self._alias = alias

    @property
    def biz_type(self) -> Type['BizObject']:
        return self._biz_type

    def get_fields(self) -> Dict:
        return self._target_fields

    def get_views(self) -> Dict:
        return self._target_views

    def get_attributes(self) -> Dict:
        return self._target_attributes

    def get_where(self) -> Dict:
        return self._where_predicates

    def get_subqueries(self) -> Dict[Text, 'Query']:
        return self._subqueries

    def get_order_by(self) -> Tuple:
        return self._order_by

    def get_limit(self) -> int:
        return self._limit

    def get_offset(self) -> int:
        return self._offset

